m <- matrix(mrow = 2, ncool = 3)
m <- matrix(nrow = 2, ncool = 3)
m <- matrix(nrow = 2, ncol = 3)
m
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
m
dim(m) <-c(2,5)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x
x <- factor(c("yes", "yes", "no", "yes", "no"),
levels = c("yes", "no"))
x
x <- c(1,2, NA,10,3)
x
is.na(x)
is.nan(x)
x <- c("a", "b", "c", "d", "a")
x[1]
x <- 4
x<- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a", "b", TRUE)
X [[1]]
X
x <- list(2, "a", "b", TRUE)
X [[1]]
X
A <- list(2, "a", "b", TRUE)
A
A[[1]]
X<- 1:4
Y<-2
X+Y
x <- c(17, 14, 4, 5, 13, 12, 10)
X[X>10]==4
x[x > 10] <- 4
X
x <- c(17, 14, 4, 5, 13, 12, 10)
X
S  <- c(17, 14, 4, 5, 13, 12, 10)
S
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x == 4] > 10
x[x > 10] == 4
x[x >= 11] <- 4
X
X
x <- c(17, 14, 4, 5, 13, 12, 10)
Y[x >= 11] <- 4
Y <-[x >= 11] <- 4
x[x > 10] <- 4
X
x <- c(17, 14, 4, 5, 13, 12, 10)
X
X
x <- c(17, 14, 4, 5, 13, 12, 10)
X
x[x > 10] <- 4
x <- c(17, 14, 4, 5, 13, 12, 10)
X[X>10]
x <- c("a", "b", "c", "c", "d", "a")
X[X>"A"]
X
PRINT(X)
X[X > "A"]
X [X > "A"]
!(0>=-1)
(TRUE != FALSE) == !(6 == 7)
TRUE && FALSE || 9 >= 4 && 3 < 6
99.99 > 100 || 45 < 7.3 || 4 != 4.0
FALSE || TRUE && FALSE
TRUE && FALSE || 9 >= 4 && 3 < 6
6 >= -9 && !(6 > 7) && !(!TRUE)
FALSE || TRUE && 6 != 4 || 9 > 4
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
!isTRUE(8 != 5)
isTRUE(!TRUE)
isTRUE(3)
!isTRUE(4 < 3)
identical(5 > 4, 3 < 3.1)
xor(identical(xor, 'xor'), 7 == 7.0)
xor(!!TRUE, !!FALSE)
xor(4 >= 9, 8 != 8.0)
ints <- sample(10)
all(ints == 10)
all(c(TRUE, FALSE, TRUE))
any(ints == 10)
sum(ints)
sum(ints)/length(ints)
mean(ints)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- list(a=1:5, b=rnorm(10))
lapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 20, mean)
apply(x, 11, mean)
apply(x, 10, mean)
apply(x, 9, mean)
apply(x, 1, mean)
x
apply(x, 2, mean)
apply(x, 3, mean)
apply(x, 1, mean)
?aplly
?apply
apply(x, 1, quantile, probs = 0.25)
apply(x, 2, quantile, probs = 0.25)
library(swirl)
cls
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flgas, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, 6, )
head(flag_colors)
laply(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, lenght)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,
| flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
tapply(Species$virginica, mean)
tapply(iris$species, mean)
tapply(iris$Species, mean)
lapply(iris$Species, mean)
sapply(iris$Species, mean)
vapply(iris$Species, mean)
tapply(iris$Species, mean)
tapply(iris, mean)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris, iris[,1], mean)
a<-split(iris, iris$Species)
a
mean(a$virginica$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
a<-split(mtcars, mtcars$cylinder)
mtcars
a<-split(mtcars, mtcars$cyl)
mean(a$6$hp)
a
mean(a)
mean(a$cyl$hp)
mean(a$6$hp)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
abs(mean(mtcars[mtcarscyl==4,]hp) - mean(mtcars[mtcarscyl==8,]hp))
mean(mtcars[mtcarscyl==4,]hp)
library(datasets)
data(mtcars)
mean(mtcars[mtcarscyl==4,]hp)
mtcars
a <- split(mtcars, mtcars$cyl )
mean(a)
lapply(a, mean)
abs(mean(mtcars[mtcarscyl==4,]hp) - mean(mtcars[mtcarscyl==8,]hp))
mean(mtcars[mtcarscyl==4,]hp)
mean(mtcars[cyl==4,]hp)
mean(mtcars[mtcars$cyl==4,]hp)
sapply(split(mtcarsmpg,mtcarscyl), mean)
sapply(split(mtcars$mpg,mtcars$cyl), mean)
sapply(split(mtcars$hp,mtcars$cyl), mean)
source('C:/Users/Rafael/Desktop/Data Science/project/programmins2.R')
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testCached
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv
test <- matrix(runif(9,1,100),100,100)
test <- matrix(runif(100,1,100),100,100)
teste
test
testCached <- makeCacheMatrix(test)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
source('C:/Users/Rafael/Desktop/Data Science/project/programmins2.R')
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
testInv
source('C:/Users/Rafael/Desktop/Data Science/project/programmins2.R')
test
testInv
test <- matrix(runif(9,1,100),3,3)
test
testCached <- makeCacheMatrix(test)
testCached
testInv <- cacheSolve(testCached)
testInv
test
?solve
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants,15)
summary((plants))
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters()
LETTERS()
?LETTERS
LETTERS()
LETTERS
sample(LETTERS)
flips <-sample(100, c(0,1), prob = c(0.3, 0.7), replace = TRUE)
flips <-sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot(cars, main="My Plot")
?plot
plot(cars, sub ="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
?ppois
?dpois
?rpois
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?qbinom
?rbinom
install.packages("rmysql")
install.packages("RMySQL")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
R.home()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
result
install.packages('RMySQL',type='source')
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
?RMySQL
install.packages('RMySQL',type='source')
install.packages("RMySQL", type = "source")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
install.packages("httr")
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/APITwitter.R')
token_secret = "vnPTUiCMiOfCs5fp89cGVs4N46wPgzZASldkbSIZHfkJz")
myapp = oauth_app("twitter",
key="BHfK1cY3vEiT0YtJorMGdEY7p",secret="66fkYCqjO1h23Sgqn59lc1LH96UXCiANt0X7tl8Uo0u1Jv3LiW")
library(httr)
install.packages("httr")
library(httr)
myapp = oauth_app("twitter",
key="BHfK1cY3vEiT0YtJorMGdEY7p",secret="66fkYCqjO1h23Sgqn59lc1LH96UXCiANt0X7tl8Uo0u1Jv3LiW")
sig = sign_oauth1.0(myapp,
token = "3077798348-L32VKA3GarCLzIpxFsJ6SWNd5iMguoC0VYBOsgp",
token_secret = "vnPTUiCMiOfCs5fp89cGVs4N46wPgzZASldkbSIZHfkJz")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/APITwitter.R')
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/APITwitter.R')
install.packages("jsonlite")
library(jsonlite)
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/APITwitter.R')
json2
names((json2))
json2[1,1:4]
json2[2,1:4]
install.packages("RODBC")
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/semana 2.R')
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
content(req)
oauth_endpoints("github")
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/semana 2.R')
oauth_endpoints("github")
>>> redirect_response = raw_input('https://api.github.com/users/jtleek/repos')
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "bc93af40a1f96a453228",
secret = "b6dbcc42249588b37bd5d73b048dd0f026bad07e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
secret = "147be6cc25e9a526f22dc19df75a2c1d47340ea5")
}
github <- oauth_endpoints("github")
myapp <- oauth_app("github",
key = "319cffb9580b74b3e3fc",
secret = "147be6cc25e9a526f22dc19df75a2c1d47340ea5")
github_token <- oauth2.0_token(github, myapp)
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/03_04_reshapingData.R')
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
sprCount = lapply(spIns,sum)
sprCount
spIns =  split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns,sum)
sprCount
sapply(spIns,sum)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/03_04_reshapingData.R')
source('C:/Users/Rafael/Desktop/Data Science/aulas/3 - Getting and Cleaning Data/03_04_reshapingData.R')
library(swirl)
swirl()
library(dplyr)
swirl()
uninstall_course("Manipulating Data with dplyr")
install_from_swirl("Manipulating Data with dplyr")
swirl()
uninstall_all_courses()
install_course_zip("C:/Users/Rafael/Desktop/Data Science/aulas/swirl_courses-master.zip", multi=TRUE, which_course="Manipulating Data with dplyr")
install_course_zip("C:/Users/Rafael/Desktop/Data Science/aulas/swirl_courses-master.zip")
swirl()
swirl()
library(swirl)
swirl()
prints_var('passed')
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
failed<- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
SAT
sat
submit()
?mutate
submit()
setwd("C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1")
plotData <- read.table(./Data/householdFile, header=T, sep=";", na.strings="?")
householdFile <- "./Data/household_power_consumption.txt"
plotData <- read.table(householdFile, header=T, sep=";", na.strings="?")
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot1.R')
dev.copy(png, file="plot1.png")
dev.off()
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot1.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot1.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot1.R')
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot2.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot2.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot3.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot3.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot3.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot3.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot4.R')
source('C:/Users/Rafael/Desktop/Data Science/project/4 - Exploratory Data Analysis/ProgrammingAssignment1/plot4.R')
